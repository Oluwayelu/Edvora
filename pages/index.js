/* eslint-disable @next/next/no-img-element */
import Head from "next/head";
import { useState, useEffect } from "react/";
import { Header, Card, Filter } from "../components";
import { Rides } from "../services";
import { filterByState, filterByCity } from "../utils";

export default function Home({
  user,
  rides,
  upcomingRide,
  pastRide,
  stateCity,
}) {
  const [filterData, setFilterData] = useState({
    state: "",
    city: "",
  });
  const [currRides, setCurrRides] = useState(rides);
  const [open, setOpen] = useState(false);
  const [active, setActive] = useState("nearest_rides");

  const close = () => {
    setOpen(!open);
  };

  const handleChange = (e) => {
    setFilterData((filterData) => {
      if ([e.target.name] == "state") {
        return { [e.target.name]: e.target.value, city: "" };
      }
      return { ...filterData, [e.target.name]: e.target.value };
    });
  };

  console.log(user);

  useEffect(() => {
    if (active === "nearest_rides") setCurrRides(rides);
    if (active === "upcoming_rides") setCurrRides(upcomingRide);
    if (active === "past_rides") setCurrRides(pastRide);
    if (filterData.state !== "")
      setCurrRides((currRide) => [
        ...filterByState(currRide, filterData.state),
      ]);
    if (filterData.city !== "")
      setCurrRides((currRide) => [...filterByCity(currRide, filterData.city)]);
  }, [active, filterData.state, filterData.city]);

  console.log(currRides);
  return (
    <div>
      <Head>
        <title>Edvora</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="relative min-h-screen bg-dark-100">
        <Header user={user} />

        <div className="w-full px-3 lg:px-10 text-white">
          <div className="w-full py-5 lg:text-xl flex justify-between items-center">
            <nav className="lg:w-full inline-flex flex-col lg:flex-row lg:space-x-10">
              <p
                className={`${
                  active === "nearest_rides" &&
                  "underline underline-offset-[5px] decoration-white"
                } cursor-pointer`}
                onClick={() => setActive("nearest_rides")}
              >
                Nearest rides
              </p>
              <p
                className={`${
                  active === "upcoming_rides" &&
                  "underline underline-offset-[5px] decoration-white"
                } cursor-pointer`}
                onClick={() => setActive("upcoming_rides")}
              >
                Upcoming rides ({upcomingRide.length})
              </p>
              <p
                className={`${
                  active === "past_rides" &&
                  "underline underline-offset-[5px] decoration-white"
                } cursor-pointer`}
                onClick={() => setActive("past_rides")}
              >
                Past rides ({pastRide.length})
              </p>
            </nav>

            <div className="inline-flex flex-col">
              <div
                onClick={close}
                className="self-end inline-flex space-x-2 cursor-pointer"
              >
                <img src="assets/filter.svg" alt="filter" />
                <p>Filters</p>
              </div>

              {open && (
                <Filter
                  handleChange={handleChange}
                  stateCity={stateCity}
                  data={filterData}
                  close={close}
                />
              )}
            </div>
          </div>
          <div className="space-y-3 lg:space-y-5">
            {currRides && currRides.length !== 0 ? (
              currRides.map((ride, index) => (
                <Card key={index} ride={ride} user={user} />
              ))
            ) : (
              <p className="text-3xl text-center text-white">
                No Rides Available
              </p>
            )}
          </div>
        </div>
      </main>
    </div>
  );
}

export async function getServerSideProps() {
  const URL = "https://assessment.api.vweb.app";

  // Fetch user data from external API
  const userRes = await fetch(`${URL}/user`);
  const user = await userRes.json();

  // Fetch rides data from external API
  const ridesRes = await fetch(`${URL}/rides`);
  const rides = await ridesRes.json();

  const parsedRide = new Rides(rides, user.station_code);
  const upcomingRide = await parsedRide.upcomingRides();
  const pastRide = await parsedRide.pastRides();

  // Pass data to the page via props
  return {
    props: {
      user,
      pastRide,
      upcomingRide,
      rides: parsedRide.rides,
      stateCity: parsedRide.stateCity,
    },
  };
}
